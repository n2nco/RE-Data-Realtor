// Generated by Selenium IDE
const { Builder, By, Key, until, Capabilities } = require('selenium-webdriver')
//require the following 2 lines for testing as doesn't run index.js:
const path = require('path')
require('dotenv').config({path: path.resolve(__dirname+'/.env')});
// let { /*defaultNdate,*/ dateMinusDays, cities } = require('./scriptVarLib')
// let { saveDataToMongo, saveDataToMongo2 } = require('./mongoLib');
const realtorScript = require('./realtorScript')
const realtorScript2 = require('./realtorScript2')//good



   //can also be called outside file now.
module.exports = getData = async function(url="https://www.realtor.com/soldhomeprices/Brooklyn_NY") {
   //this.timeout(30000)
   let chromeCapabilities = Capabilities.chrome()
   chromeCapabilities.set("goog:chromeOptions", {
      args: [
         "--lang=en",
         "--no-sandbox",
         "--disable-dev-shm-usage",
         // '-headless',
         "disable-infobars",
         '--disable-gpu'
      ]
   });
   let driver
   let data
   try{
    driver = await new Builder().forBrowser('chrome').withCapabilities(chromeCapabilities).build()
    await driver.get(url)
    await driver.manage().window().setRect(1308, 877)
    await driver.sleep(1400)
    console.log('test - returning title')
    let test = await driver.executeScript(`return document.title`)
   
    console.log(test)
    await driver.sleep(1400)
    await driver.executeScript(realtorScript2)
   //  soldTodayData = await driver.executeScript(`return window.soldTodayData`)
   //  soldYesterdayData = await driver.executeScript(`return window.soldYesterdayData`)
   //  soldTwoDaysAgoData = await driver.executeScript(`return window.soldTwoDaysAgoData`)
    data = await driver.executeScript(`return window.city`)
    console.log('data:')
    console.log(data)
   } catch(e) {
      console.log('error in driving realtor.com  ' + e)
   }  
   finally{
      try {
         if ((driver) && (typeof driver !== 'undefined')) {
            try{
               console.log('quitting driver')
               await driver?.close()
               await driver?.quit() 
            }
            catch(e){
               console.log('error attempting to close driver. might already be closed' + e)}
         } 
      }
      catch(e) {
          console.log('driver not found in finally. must have already quit. error: ' + e)
         }
   }
   return data
 }



//NOT IN USE - was ip blocked
//@param array of urls
const getDataSingleDriver = async function(urls) {
   let chromeCapabilities = Capabilities.chrome()
   chromeCapabilities.set("goog:chromeOptions", {
      args: [
         "--lang=en",
         "--no-sandbox",
         "--disable-dev-shm-usage",
         // '-headless',
         "disable-infobars",
         '--disable-gpu'
      ]
   });
   let driver
   let data = []

   try{
      //reused
      driver = await new Builder().forBrowser('chrome').withCapabilities(chromeCapabilities).build()
     
      for await (let url of urls) {
         //swap IP
         await driver.get(url)
         await driver.manage().window().setRect(1308, 877)
         await driver.sleep(1400)
         let test = await driver.executeScript(`return document.title`)
         console.log('test - returning title')
         console.log(test)
         await driver.sleep(1400)
         await driver.executeScript(realtorScript2)
         await driver.sleep(400)
         const cityName = url.split('/').pop()
         resolvedData = await driver.executeScript(`return window.city`)
         global.cityName = resolvedData
         data.push(global.cityName)  
         console.log('data obtained for: ' + cityName)
         console.log(global.cityName)
         
      }
   } catch(e) {
   console.log('error in driving realtor.com  ' + e)
   }  
   finally{
      try {
         if ((driver) && (typeof driver !== 'undefined')) {
            try{
               console.log('quitting driver')
               await driver?.close()
               await driver?.quit() 
            }
            catch(e){
               console.log('error attempting to close driver. might already be closed' + e)}
         } 
      }
      catch(e) {
         console.log('driver not found in finally. must have already quit. error: ' + e)
         }
   }
   return data
}

 module.exports.getDataSingleDriver = getDataSingleDriver